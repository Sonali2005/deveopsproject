
# Define the provider
provider "aws" {
 region = "us-east-1" # Replace with your desired 
region
}
# Create VPC for the EKS cluster
resource "aws_vpc" "rath_eks_vpc_sonali" {
 cidr_block = "10.0.0.0/16" # Replace with your 
desired CIDR block
 tags = {
 Name = "eks-vpc_sonali"
 }
}
# Create public subnets for the EKS cluster
resource "aws_subnet" "rath_public_subnet_1_sonali" 
{
 vpc_id = aws_vpc.rath_eks_vpc_sonali.id
 cidr_block = "10.0.0.0/24" # Replace with your 
desired CIDR block
 availability_zone = "us-east-1a" # Replace with 
your desired availability zone
 tags = {
 Name = "public-subnet-1_sonalirath"
 }
}
resource "aws_subnet" "rath_public_subnet_2_sonali" 
{
 vpc_id = aws_vpc.rath_eks_vpc_sonali.id
 cidr_block = "10.0.1.0/24" # Replace with your 
desired CIDR block
 availability_zone = "us-east-1b" # Replace with 
your desired availability zone
 tags = {
 Name = "public-subnet-2_sonalirath"
 }
}
# Create private subnets for the EKS cluster
resource "aws_subnet" 
"rath_private_subnet_1_sonali" {
 vpc_id = aws_vpc.rath_eks_vpc_sonali.id
 cidr_block = "10.0.2.0/24" # Replace with your 
desired CIDR block
 availability_zone = "us-east-1a" # Replace with 
your desired availability zone
 tags = {
 Name = "private-subnet-1_sonalirath"
 }
}
resource "aws_subnet" 
"rath_private_subnet_2_sonali" {
 vpc_id = aws_vpc.rath_eks_vpc_sonali.id
 cidr_block = "10.0.3.0/24" # Replace with your 
desired CIDR block
 availability_zone = "us-east-1b" # Replace with 
your desired availability zone
 tags = {
 Name = "private-subnet-2_sonalirath"
 }
}
# Create IAM roles for the EKS cluster
resource "aws_iam_role" "rathsonali_eks_worker_role" 
{
 name = "eks-worker-role_sonalirath"
 assume_role_policy = jsonencode({
 Version = "2012-10-17"
 Statement = [
 {
 Action = "sts:AssumeRole"
 Effect = "Allow"
 Principal = {
 Service = "ec2.amazonaws.com"
 }
 }
 ]
 })
 managed_policy_arns = [
 "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
 ]
}
resource "aws_iam_role" "rathsonali_eks_master_role" 
{
 name = "eks-master-role_sonalirath"
 assume_role_policy = jsonencode({
 Version = "2012-10-17"
 Statement = [
 {
 Action = "sts:AssumeRole"
 Effect = "Allow"
 Principal = {
 Service = "eks.amazonaws.com"
 }
 }
 ]
 })
 managed_policy_arns = [
 "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
 ]
}
# Create the EKS cluster
resource "aws_eks_cluster" "eks_cluster_sonali" {
 name = "my-eks-cluster_sonalirath"
 role_arn = 
aws_iam_role.rathsonali_eks_master_role.arn
 version = "1.27" # Replace with a supported 
Kubernetes version
 vpc_config {
 subnet_ids = [
 aws_subnet.rath_public_subnet_1_sonali.id,
 aws_subnet.rath_public_subnet_2_sonali.id,
 aws_subnet.rath_private_subnet_1_sonali.id,
 aws_subnet.rath_private_subnet_2_sonali.id,
 ]
 }
}
# Create the launch template for worker nodes
resource "aws_launch_template" "worker_lt_sonali" {
 name_prefix = "eks-worker-lt_sonalirath"
 image_id = "ami-04823729c75214919" # Replace 
with the desired Amazon Linux AMI ID
 instance_type = "t2.medium" # Replace with your 
desired instance type
 block_device_mappings {
 device_name = "/dev/xvda"
 ebs {
 volume_size = 8 # Replace with your desired root 
volume size in GB
 }
 }
}
# Create the autoscaling group for worker nodes
resource "aws_autoscaling_group" 
"worker_asg_sonali" {
 name = "eks-worker-asg_sonali"
 launch_template {
 id = aws_launch_template.worker_lt_sonali.id
 version = "$Latest"
 }
 min_size = 2 # Replace with your desired 
minimum number of worker nodes
 max_size = 5 # Replace with your desired 
maximum number of worker nodes
 desired_capacity = 2 # Replace with your desired 
initial number of worker nodes
 vpc_zone_identifier = [
 aws_subnet.rath_private_subnet_1_sonali.id,
 aws_subnet.rath_private_subnet_2_sonali.id,
 ]
 tag {
 key = "Name"
 value = "eks-worker"
 propagate_at_launch = true
 }
